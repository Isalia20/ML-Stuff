import numpy as np
import keras


class DataGenerator(keras.utils.Sequence):
    def __init__(self, list_IDs, batch_size=32, embedding_size=100, shuffle=True):
        self.embedding_size = embedding_size
        self.batch_size = batch_size
        self.list_IDs = list_IDs
        self.shuffle = shuffle
        self.indexes = None
        self.on_epoch_end()

    #
    # def __len__(self):
    #     """
    #     Denotes the number of batches per epoch
    #     """
    #     return int(np.floor(len(self.list_IDs) / self.batch_size))

    # def data_generator(self, batch_size=32, embedding_size=100):
    #     i = 0
    # 
    #     while True:
    #         x = [anchors[i * batch_size:batch_size * (i + 1)],
    #              positives[i * batch_size:batch_size * (i + 1)]]
    #         y = np.zeros((batch_size, 2 * embedding_size))
    #         i += 1
    #         yield x, y

    def __getitem__(self, index):
        """
        Generate one batch of data
        """
        # Generate indexes of the batch
        indexes = self.indexes[index * self.batch_size:(index + 1) * self.batch_size]

        # Find list of IDs
        list_IDs_temp = [self.list_IDs[k] for k in indexes]

        # Generate data
        X, y = self.__data_generation(list_IDs_temp)

        return X, y

    def on_epoch_end(self):
        """Updates indexes after each epoch"""
        self.indexes = np.arange(len(self.list_IDs))
        if self.shuffle == True:
            np.random.shuffle(self.indexes)

    def __data_generation(self, anchors, list_IDs_temp):
        """Generates data containing batch_size samples"""  # X : (n_samples, *dim, n_channels)
        # Initialization
        x = [np.empty(shape=(32, 1, 64)), np.empty(shape=(32, 1, 64))]
        y = np.empty((self.batch_size, 2 * self.embedding_size))

        # Generate data
        for i, ID in enumerate(list_IDs_temp):
            # Store sample
            x[i, ] = np.load('data/' + ID + '.npy')

        return x
